
Polymorphism is one of the OOPs feature that allows us to perform a single action in different ways.
For example, lets say we have a class Animal that has a method sound().
Since this is a generic class so we canâ€™t give it a implementation
like: Roar, Meow, Oink etc. We had to give a generic message.

public class Animal{
   ...
   public void sound(){
      System.out.println("Animal is making a sound");
   }
}

Now lets say we two subclasses of Animal class: Horse and Cat that extends (see Inheritance) Animal class.
We can provide the implementation to the same method like this:

public class Horse extends Animal{
...
    @Override
    public void sound(){
        System.out.println("Neigh");
    }
}

and

public class Cat extends Animal{
...
    @Override
    public void sound(){
        System.out.println("Meow");
    }
}

As you can see that although we had the common action for all subclasses sound()
but there were different ways to do the same action. This is a perfect example of polymorphism
(feature that allows us to perform a single action in different ways).
It would not make any sense to just call the generic sound() method as each Animal has a different sound.
Thus we can say that the action this method performs is based on the type of object.


Polymorphism is the capability of a method to do different things based on the object that it is acting upon.
In other words, polymorphism allows you define one interface and have multiple implementations.
As we have seen in the above example that we have defined the method sound()
and have the multiple implementations of it in the different-2 sub classes.
Which sound() method will be called is determined at runtime so the example
we gave above is a runtime polymorphism example.